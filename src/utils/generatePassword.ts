import type { PasswordSettings } from "../components/SettingsPanel";

const UPPERCASE_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const LOWERCASE_CHARS = "abcdefghijklmnopqrstuvwxyz";
const RUS_UPPERCASE_CHARS = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø";
const RUS_LOWERCASE_CHARS = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è";
const NUMBER_CHARS = "0123456789";
const SYMBOL_CHARS = "!@#$%^&*()_+-=[]{}|;:,.<>?";

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
 */
export function generatePassword(settings: PasswordSettings): string {
  let availableChars = "";
  const guaranteedChars: string[] = [];

  if (settings.engUppercase) {
    availableChars += UPPERCASE_CHARS;
    guaranteedChars.push(
      UPPERCASE_CHARS[Math.floor(Math.random() * UPPERCASE_CHARS.length)]
    );
  }
  if (settings.engLowercase) {
    availableChars += LOWERCASE_CHARS;
    guaranteedChars.push(
      LOWERCASE_CHARS[Math.floor(Math.random() * LOWERCASE_CHARS.length)]
    );
  }
  if (settings.rusUppercase) {
    availableChars += RUS_UPPERCASE_CHARS;
    guaranteedChars.push(
      RUS_UPPERCASE_CHARS[Math.floor(Math.random() * RUS_UPPERCASE_CHARS.length)]
    );
  }
  if (settings.rusLowercase) {
    availableChars += RUS_LOWERCASE_CHARS;
    guaranteedChars.push(
      RUS_LOWERCASE_CHARS[Math.floor(Math.random() * RUS_LOWERCASE_CHARS.length)]
    );
  }
  if (settings.numbers) {
    availableChars += NUMBER_CHARS;
    guaranteedChars.push(
      NUMBER_CHARS[Math.floor(Math.random() * NUMBER_CHARS.length)]
    );
  }
  if (settings.symbols) {
    availableChars += SYMBOL_CHARS;
    guaranteedChars.push(
      SYMBOL_CHARS[Math.floor(Math.random() * SYMBOL_CHARS.length)]
    );
  }

  if (availableChars.length === 0) {
    throw new Error("–ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è.");
  }

  const remainingLength = settings.length - guaranteedChars.length;
  let passwordArray = [...guaranteedChars];

  for (let i = 0; i < remainingLength; i++) {
    passwordArray.push(
      availableChars[Math.floor(Math.random() * availableChars.length)]
    );
  }

  // üîÄ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã (Fisher‚ÄìYates shuffle)
  for (let i = passwordArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [passwordArray[i], passwordArray[j]] = [passwordArray[j], passwordArray[i]];
  }

  return passwordArray.join("");
}
